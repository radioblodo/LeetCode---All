#Approach 1
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        #If there are odd number of nodes in total, stop at the second last node 
        #If there are even number of nodes in total, swap for all pairs of nodes 

        allNodes = []
        traverser = head 
        while traverser != None:
            allNodes.append(traverser)
            traverser = traverser.next 

        if len(allNodes) == 0:
            return None
        
        if len(allNodes) == 1:
            return allNodes[0]

        # Step 2: Swap nodes in pairs
        for i in range(0, len(allNodes) - 1, 2):
            allNodes[i], allNodes[i + 1] = allNodes[i + 1], allNodes[i]
        
        # Step 3: Reconstruct the linked list from the array of nodes
        for i in range(len(allNodes) - 1):
            allNodes[i].next = allNodes[i + 1]
        allNodes[-1].next = None  # Last node should point to None
        
        return allNodes[0]

Explanation: 
1. Create a allNodes List to store all the ListNodes in the list 
2. Swap the position for every pair of nodes 
3. Link up the ListNodes again 
4. Return the very first ListNode
Time Complexity: O(n)

#Approach 2 (More Efficient Approach)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head 

        dummy = ListNode(0)
        dummy.next = head 
        prev = dummy 

        while head and head.next:
            first = head 
            second = head.next

            prev.next = second 
            first.next = second.next 
            second.next = first 

            prev = first
            head = first.next

        return dummy.next

Explanation: 
1. Set up a dummy ListNode with the next node as the head 
2. Create a 'prev' node that is pointing to dummy (prev -> head -> node2 -> node3 -> ...)
3. While head and head.next are both not None, perform the body of the while-loop:
  a. first = head 
  b. second = node2
  c. prev.next = second (Now the list looks like this: prev -> node2 -> node3 & head -> node2)
  d. first.next = second.next (Now the list looks like this: prev -> node2 -> node3 & head -> node 3)
  e. second.next = first (Now the list looks like this: prev -> node2 -> head -> node3)
  f. prev = first (Now prev becomes where head is)
  g. head = first.next (Now head becomes where node3 is)
  h. And the same cycle continues until there is no longer a pair of ListNodes 
4. return dummy.next (which in this case is node2)
Time Complexity: O(n) but this only iterates for about half the linked list 
Space Complexity: O(1)
