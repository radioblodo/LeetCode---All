class Solution:
    def removeDuplicates(self, result: List[List[int]]) -> List[List[int]]:
        tuples = map(tuple, result)

        unique_tuples = set(tuples)

        unique_lists = list(map(list, unique_tuples))

        return unique_lists
        
    def findCombinations(self, result: List[List[int]], candidates: List[int], temp: List[int], target: int, index: int) -> None:
        if target == 0:
            result.append(list(temp))
            return
        for i in range(index, len(candidates)):
            if target - candidates[i] >= 0:
                temp.append(candidates[i])
                self.findCombinations(result, candidates, temp, target-candidates[i], index)
                temp.pop()
        
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        result = []
        temp = []

        candidates = sorted(list(set(candidates)))
        self.findCombinations(result, candidates, temp, target, 0)
        for array in result:
            array.sort()
        
        return self.removeDuplicates(result)
